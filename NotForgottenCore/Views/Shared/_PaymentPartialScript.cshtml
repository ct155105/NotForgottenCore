@model NotForgottenCore.Models.Router
@using Newtonsoft.Json;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    //Change key value pair to JSON
    var json = Html.Raw(JsonConvert.SerializeObject(Model.RouteValue));
    var amount = Model.RouteValue["Amount"];
    var description = Model.RouteValue["Description"];
    var stripePublicKey = Configuration.GetSection("stripeApiKeys").GetValue<string>("Public");
}

@* Must Load Stripe.Js at top of Main View (Cannot load from partial view). Inlude this in top of main view:
        @section scriptsTop{
        <script src="https://js.stripe.com/v3/"></script>
    }*@

<script>
    // Create a Stripe client.
    // ****CT**** Need to parameterize this
    var stripe = Stripe('@stripePublicKey');
                var counter = 0;
                // Create an instance of Elements.
                var elements = stripe.elements();
                var style = {
        base: {
                color: '#32325d',
            lineHeight: '18px',
            width: '200px',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: 'antialiased',
            fontSize: '16px',
            '::placeholder': {
                    color: '#aab7c4'
            }
                },
        invalid: {
                color: '#fa755a',
            iconColor: '#fa755a'
        }
            };
            // Create an instance of the card Element.
            var card = elements.create('card', { style: style });

    $('input[type=radio][name=radio]').change(function () {
            if (counter == 0) {
                stripefunction();
                counter++;
            }

            if (this.id == 'payCash') {
                if (this.checked == true) {
                $('#card-element').addClass('d-none');
                    }
                    }
                else {
                $('#card-element').removeClass('d-none');
                }
            });

            function stripefunction() {

                // Add an instance of the card Element into the `card-element` <div>
                card.mount('#card-element');

                // Handle real-time validation errors from the card Element.
                card.addEventListener('change', function (event) {
                    var displayError = document.getElementById('card-errors');
                    if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

    };

    function submitForm() {
        return $.ajax({
        type: "POST",
            url: '@this.Url.Action( Model.Action, Model.Controller)',
            data: $('#MainForm').serialize(),
        });
    };

    function submitCard(token) {
        //var myData = JSON.stringify({ "StripeToken": token, "Amount": $('#amount').val() });
        var myData = JSON.stringify({ "StripeToken": token, "Amount": @amount, "Description": "@description" });
        $.ajax({
        url: '@this.Url.Action("Pay", "Payment")',
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: myData,
            success: function () {
                //alert('Success');
                $("#MainForm").submit();
            }
        });
    }

    function payCash() {
        var myData = JSON.stringify(@json);
        $.ajax({
        url: '@this.Url.Action("PayCash", "Payment")',
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: myData,
            success: function () {
                //alert('Success DB updated');
                $("#MainForm").submit();
            }//,
            //complete: function () {
            //    alert('complete');
            //    $("#MainForm").submit();
            //}
        });
    }

    // Handle form submission.
    var form = document.getElementById('MainForm')
    form.addEventListener('submit', function (event) {
        event.preventDefault();
        debugger;
        if ($('#payCash').is(':checked')) {
            payCash();
            //$("#MainForm").submit();
        }
        else {
            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                } else {
                    // Send the token to your server.
                    var stripeToken = result.token.id;
                    submitCard(stripeToken);
                }
            });
        }
    });

    //Original Stripe.js Function
    // Handle form submission.
    //var form = document.getElementById('payment-form');
    //form.addEventListener('submit', function (event) {
    //    event.preventDefault();

    //    stripe.createToken(card).then(function (result) {
    //        if (result.error) {
    //            // Inform the user if there was an error.
    //            var errorElement = document.getElementById('card-errors');
    //            errorElement.textContent = result.error.message;
    //        } else {
    //            // Send the token to your server.
    //            stripeTokenHandler(result.token);
    //        }
    //    });
    //});

    //// Submit the form with the token ID.
    //function stripeTokenHandler(token) {
    //    // Insert the token ID into the form so it gets submitted to the server
    //    var form = document.getElementById('payment-form');
    //    var hiddenInput = document.createElement('input');
    //    hiddenInput.setAttribute('type', 'hidden');
    //    hiddenInput.setAttribute('name', 'stripeToken');
    //    hiddenInput.setAttribute('value', token.id);
    //    form.appendChild(hiddenInput);

    //    // Submit the form
    //    form.submit();
    //}
</script>